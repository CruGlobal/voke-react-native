cocoapods repo_update: true

import_from_git(
    url: 'https://github.com/CruGlobal/cru-fastlane-files',
    branch: 'master',
    path: 'Fastfile'
)

platform :ios do
    override_lane :cru_build_app do |options|
        profile_name = options[:profile_name] || ENV["CRU_APPSTORE_PROFILE_NAME"]
        type = options[:type] || 'appstore'
        export_method = options[:export_method] || 'app-store'

        if ENV['CRU_SKIP_LOCALIZATION_DOWNLOAD'].nil?
        cru_download_localizations
        end

        automatic_code_signing(
            use_automatic_signing: false,
            profile_name: profile_name
        )


        unless options.key?(:skip_create_keychain) && options[:skip_create_keychain]
        # Travis requires a keychain to be created to store the certificates in, however
        # using this utility to create a keychain locally will really mess up local keychains
        # and is not required for a successful build.
        # It also cannot be called more than once (in the case that cru_build_app happens more than once in the same execution)
        create_keychain(
            name: ENV["MATCH_KEYCHAIN_NAME"],
            password: ENV["MATCH_PASSWORD"],
            default_keychain: true,
            unlock: true,
            timeout: 3600,
            add_to_search_list: true
            )
        end
        unless ENV["CRU_CALLDIRECTORY_TARGET"].nil?
        call_directory_profile  = type == "adhoc" ? ENV["CRU_CALLDIRECTORY_ADHOC_PROFILE_NAME"] : ENV["CRU_CALLDIRECTORY_APPSTORE_PROFILE_NAME"]
        automatic_code_signing(
            use_automatic_signing: false,
            targets: ENV["CRU_CALLDIRECTORY_TARGET"],
            profile_name: call_directory_profile
        )
        end

        cru_fetch_certs(type: type)

        if ENV["CRU_SKIP_COCOAPODS"].nil?
        cocoapods(
            podfile: './Podfile',
            try_repo_update_on_error: true
        )
        end

        # !!! Path to the folder that you will cache on CI !!!
        ios_derived_data_path = File.expand_path("../.local_derived_data")
        cache_folder = File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{ENV["CRU_SCHEME"]}/BuildProductsPath/Release-iphoneos")

        # Step 0) Check if cache exists
        if(File.exist?(cache_folder))
            # Step 1) Apply a fix of "Copy Pods Resources" Build Phase

            # Before:
            # "${PODS_ROOT}/Target Support Files/Pods-Voke/Pods-Voke-resources.sh"
            #
            # After:
            # BUILT_PRODUCTS_DIR=/a/b/c "${PODS_ROOT}/Target Support Files/Pods-Voke/Pods-Voke-resources.sh"

            fastlane_require 'xcodeproj'
            project = Xcodeproj::Project.open("../ios/Voke.xcodeproj")
            target = project.targets.select { |target| target.name == 'Voke' }.first
            phase = target.shell_script_build_phases.select { |phase| phase.name && phase.name.include?('Copy Pods Resources') }.first
            if (!phase.shell_script.start_with?('BUILT_PRODUCTS_DIR'))
                phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_folder} #{phase.shell_script}"
                project.save()
            end

            # Step 2) Build only .xcodeproj
            gym(
                scheme: ENV["CRU_SCHEME"],
                clean: false,
                project: './ios/Voke.xcodeproj',
                configuration: 'Release',
                export_method: export_method,
                destination: 'generic/platform=iOS',
                export_options: {
                    compileBitcode: false,
                    uploadBitcode: false,
                    uploadSymbols: false,
                    provisioningProfiles: {
                        ENV["CRU_APP_IDENTIFIER"] => profile_name
                    }
                },
                xcargs: [
                    # Step 3) Provide paths where xcode can't find pods binaries
                    "PODS_CONFIGURATION_BUILD_DIR=#{cache_folder}",
                    "FRAMEWORK_SEARCH_PATHS='#{cache_folder} $(inherited)'",
                    "LIBRARY_SEARCH_PATHS='#{cache_folder} $(inherited)'",
                    "SWIFT_INCLUDE_PATHS=#{cache_folder}"
                ].join(" ")
            )
        else
            # Step 4) Build full app .xcworkspace
            gym(
                scheme: ENV["CRU_SCHEME"],
                workspace: "./ios/Voke.xcworkspace",
                derived_data_path: ios_derived_data_path,
                export_method: export_method,
                configuration: 'Release',
                export_options: {
                    provisioningProfiles: {
                        ENV["CRU_APP_IDENTIFIER"] => profile_name
                    }
                },
                clean: true
            )

            # Step 5) Remove not a Pods binaries to reduce cache size
            require 'fileutils';
            dirs = [
                File.expand_path("#{ios_derived_data_path}/info.plist"),
                File.expand_path("#{ios_derived_data_path}/Logs"),
                File.expand_path("#{ios_derived_data_path}/SourcePackages"),
                File.expand_path("#{ios_derived_data_path}/ModuleCache.noindex"),
                File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/Voke/IntermediateBuildFilesPath/Voke.build"),
                File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/Voke/IntermediateBuildFilesPath/XCBuildData"),
                File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/Voke/BuildProductsPath/SwiftSupport"),
                File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/Voke/PrecompiledHeaders")
            ]
            dirs.each { |dir| FileUtils.rm_rf(dir) }
        end
    end
end

