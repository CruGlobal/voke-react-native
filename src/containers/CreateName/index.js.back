import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Platform,
  Alert,
  KeyboardAvoidingView,
  Animated,
} from 'react-native';
import { useSpring, animated, config } from '@react-spring/native';
import { useNavigation } from '@react-navigation/native';
import { useSafeArea } from 'react-native-safe-area-context';
import { useSelector, useDispatch } from 'react-redux';
import useKeyboard from '@rnhooks/keyboard';
import { createAccount, updateMe } from '../../actions/auth';
import DismissKeyboardView from '../../components/DismissKeyboardHOC';
import Triangle from '../../components/Triangle';
import NameInput from '../../components/NameInput';
import Button from '../../components/Button';
import Flex from '../../components/Flex';
import Text from '../../components/Text';
import Image from '../../components/Image';
import st from '../../st';

import VOKE_BOT from '../../assets/voke_bot_face_large.png';

const CreateName = () => {
  const insets = useSafeArea();
  const dispatch = useDispatch();
  const navigation = useNavigation();
  // State:
  const initialFirstName = useSelector(({ auth }) => auth.user.first_name);
  const initialLastName = useSelector(({ auth }) => auth.user.last_name);
  const isLoggedIn = useSelector(({ auth }) => auth.isLoggedIn);
  // Hooks:
  const [isKeyboardVisible, dismissKeyboard] = useKeyboard();
  const [isLoading, setIsLoading] = useState(false);
  const [firstName, setFirstName] = useState(initialFirstName);
  const [lastName, setLastName] = useState(initialLastName);
  const lastNameRef = useRef(null);

  const [moveWithKeybAnim] = useState(new Animated.Value(60)); // Initial value.
  const animations = useSpring({ marginTop: -120, from: { marginTop: 60 } });
  const AnimatedView = animated(View);
  // const y = useSpring(
  //   { y: -120, from: { y: 60 } }
  // );

  const anim = useSpring({
    // from: {y: -120, xyz: [0, 0, 0], color: 'red'},
    marginTop: isKeyboardVisible ? -200 : 60,
    config: { mass: 1, tension: 400, friction: 26 },
    delay: 0,
    // color: 'green',
  });

  /*  React.useEffect(() => {
    console.log( "isKeyboardVisible:" ); console.log( isKeyboardVisible );
    setAnim({marginTop:-260})
    console.log( "anim.y:" ); console.log( anim.marginTop );

  }, [isKeyboardVisible]); */

  const handleContinue = async () => {
    if (!firstName || firstName.length < 1) {
      return Alert.alert(
        'Please provide your first name',
        'We need at least your first name so your friends know who you are',
      );
    }
    if (firstName === initialFirstName && lastName === initialLastName) {
      // Nothing changed
      return navigation.navigate('CreateProfilePhoto');
    }
    setIsLoading(true);

    if (!isLoggedIn) {
      // Create New Account.
      await dispatch(
        createAccount({
          first_name: firstName,
          last_name: lastName,
        }),
      );
    } else {
      try {
        // Update Existing Account.
        await dispatch(
          updateMe({
            first_name: firstName,
            last_name: lastName,
          }),
        );
      } catch (e) {
        // eslint-disable-next-line no-console
        console.log("ðŸ›‘ Error updating the user's details \n", e);
        Alert.alert(e.error_description ? e.error_description : e.errors[0]);
      }
    }

    setIsLoading(false);
    // Go to the next screen.
    return navigation.navigate('CreateProfilePhoto');
  };

  return (
    <DismissKeyboardView style={[st.bgBlue]}>
      {/* <StatusBar /> <- TODO: Not sure why we need it here? */}

      {/* Makes possible to hide keyboard when tapping outside. */}
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'} // TODO: Verify!
        style={[
          st.aic,
          st.w100,
          st.jcsb,
          st.bgBlue,
          { paddingTop: insets.top },
        ]}
      >
        <Flex direction="column" justify="end" style={[st.w100, st.h100]}>
          <AnimatedView
            style={[
              {
                /* backgroundColor: '#EEFF00',
              height: '50%',
              width: '100%', */
                flexDirection: 'row',
                // position: 'absolute',
                // transform: [{ translateY: y.y }],
                // opacity,
                // marginTop: ( (!isKeyboardVisible) ? anim.y : ()=>setAnim({ y: -260 })),
                // top: 60,
              },
              anim,
            ]}
          >
            <Flex
              direction="row"
              align="start"
              justify="between"
              style={[st.h(180)]}
            >
              {/* <Text>{anim.y.value}</Text> */}
              <Flex justify="end" self="stretch" style={[]}>
                <Image
                  source={VOKE_BOT}
                  resizeMode="contain"
                  style={[
                    st.w(80),
                    st.h(120),
                    { transform: [{ rotateY: '180deg' }] },
                  ]}
                />
              </Flex>
              <Flex
                direction="column"
                value={1}
                justify="start"
                style={[st.pr1]}
              >
                <Flex style={[st.bgOffBlue, st.ph3, st.pv5, st.br5]}>
                  <Text style={[st.white, st.fs20, st.tac]}>
                    {initialFirstName
                      ? 'Please confirm your name'
                      : 'Hi! My name is Vokebot. What is your name?'}
                  </Text>
                </Flex>
                <Triangle
                  width={20}
                  height={15}
                  color={st.colors.offBlue}
                  slant="down"
                  flip
                  style={[st.rotate(90), st.mt(-6)]}
                />
              </Flex>
            </Flex>
          </AnimatedView>

          <Flex
            value={1}
            direction="column"
            align="center"
            justify="flex-start"
            self="stretch"
            style={[
              st.ph1,
              st.w100,
              { paddingTop: isKeyboardVisible ? 50 : 0 },
            ]}
          >
            <NameInput
              blurOnSubmit={false}
              label="First Name (Required)"
              onSubmitEditing={() => lastNameRef.current.focus()}
              placeholder="First"
              value={firstName}
              onChangeText={text => setFirstName(text)}
              returnKeyType="next"
            />
            <NameInput
              ref={lastNameRef}
              blurOnSubmit
              label="Last Name"
              placeholder="Last"
              value={lastName}
              onChangeText={text => setLastName(text)}
              returnKeyType="done"
              onSubmitEditing={handleContinue}
            />
          </Flex>
          <Button
            onPress={handleContinue}
            touchableStyle={[st.w100, st.bgDarkBlue, st.p4]}
            isLoading={isLoading}
          >
            <Text style={[st.white, st.fs20, st.tac]}>Continue</Text>
          </Button>
          {/* Safety spacing. */}
          <Flex style={{ paddingBottom: insets.bottom }} />
        </Flex>
      </KeyboardAvoidingView>
    </DismissKeyboardView>
  );
};

export default CreateName;
