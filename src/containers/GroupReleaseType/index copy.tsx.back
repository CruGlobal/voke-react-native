/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/camelcase */
import React, { useState, ReactElement, useRef, useEffect } from 'react';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import { Modalize } from 'react-native-modalize';
import { useDispatch, useSelector } from 'react-redux';
import { useTranslation } from 'react-i18next';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import useKeyboard from '@rnhooks/keyboard';
import Carousel, {triggerRenderingHack} from 'react-native-snap-carousel';
import {
  KeyboardAvoidingView,
  Alert,
  ScrollView,
  Platform,
  Keyboard,
  View,
  Dimensions,
} from 'react-native';

import AccountSignIn from '../AccountSignIn';
import CustomTabs from '../../components/CustomTabs';
import { RootState } from '../../reducers';
import DismissKeyboardView from '../../components/DismissKeyboardHOC';
import Flex from '../../components/Flex';
import Text from '../../components/Text';
import TextField from '../../components/TextField';
import st from '../../st';
import Button from '../../components/Button';
import theme from '../../theme';
import BotTalking from '../../components/BotTalking';
import Touchable from '../../components/Touchable';
import {
  sendAdventureInvitation,
  sendVideoInvitation,
} from '../../actions/requests';
import AccountCreate from '../AccountCreate';

import styles from './styles';

function GroupReleaseType(props: any): ReactElement {
  const { t } = useTranslation('share');
  const navigation = useNavigation();
  const dispatch = useDispatch();
  const [isLoading, setIsLoading] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalHeight, setModalHeight] = useState(0);
  const { groupName, itemId } = props.route.params;
  const { width, height } = Dimensions.get('window');

  const [isKeyboardVisible] = useKeyboard({
    useWillShow: Platform.OS === 'android' ? false : true,
    useWillHide: Platform.OS === 'android' ? false : true,
    // Not availabe on Android https://reactnative.dev/docs/keyboard#addlistener
  });

  const NameValidationSchema = Yup.object().shape({
    name: Yup.string().required(t('required')),
  });

  useEffect(() => {
    triggerRenderingHack()
    return () => {
      // cleanup
    }
  }, [])

  const formik = useFormik({
    initialValues: {
      name: '',
    },
    validationSchema: NameValidationSchema,
    onSubmit: async values => {
      Keyboard.dismiss();
      // Before sending a group name to the server
      // we need to check if user isn't a guest user.
      if (!email) {
        setModalOpen(true);
      } else {
        try {
          setIsLoading(true);
          let result;
          if (isVideoInvite) {
            // TODO: check this scenario.
            result = await dispatch(
              sendVideoInvitation({
                name: values.name,
                item_id: `${item.id}`,
              }),
            );
          } else {
            result = await dispatch(
              sendAdventureInvitation({
                organization_journey_id: item.id,
                name: values.name,
                kind: withGroup ? 'multiple' : 'duo',
              }),
            );
          }

          if (result?.id) {
            navigation.navigate('AdventureShareCode', {
              invitation: result,
              withGroup,
              isVideoInvite,
            });
          } else {
            Alert.alert(
              'Failed to create a valid invite.',
              'Please try again.',
            );
          }
        } catch (e) {
          if (e?.message === 'Network request failed') {
            Alert.alert(e?.message, t('checkInternet'));
          } else if (e?.message) {
            Alert.alert(e?.message);
          } else {
            console.error(e);
          }
        }
      }
    },
  });

  const renderItem = ({item, index}) => {
    return <View style={{
              // backgroundColor:'floralwhite',
              borderRadius: theme.radius.l,
              height: 100,
              width: 100,
              // padding: theme.spacing.l,
              // alignItems: 'center',
              // marginLeft: 25,
              // marginRight: 25,
              }}>
            <Text style={{fontSize: theme.fontSizes.xxl}}>{index} {item.title}</Text>
            {<Text>{item.description}</Text>}
          </View>
  }

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      style={{
        backgroundColor: theme.colors.primary,
        flex: 1,
        height: '100%',
      }}
      enabled={!modalOpen}
    >
      <ScrollView
        keyboardShouldPersistTaps="handled"
        contentContainerStyle={{
          minHeight: '100%',
          flexDirection: 'column',
          alignContent: 'stretch',
          justifyContent: 'center',
        }}
      >
        <DismissKeyboardView
          style={{
            flex: 1,
          }}
        >
          <SafeAreaView
            // edges={['left', 'right', 'bottom']}
            style={{
              height: '100%',
              flexDirection: 'column',
              flex: 1,
              alignContent: 'stretch',
              justifyContent: 'center',
              // backgroundColor: 'blue',
            }}
          >
            <Flex value={1} direction="column" justify="center">
              {isKeyboardVisible && (
                <View style={{ minHeight: theme.spacing.xl }} />
              )}
              <Flex
                align="center"
                justify="center"
                style={{
                  display: isKeyboardVisible ? 'none' : 'flex',
                  // paddingBottom: theme.spacing.xl,
                  // paddingTop: height > 800 ? theme.spacing.xl : 0,
                  // minHeight: 200,
                  paddingBottom: theme.spacing.xl,
                }}
              >
                <BotTalking
                  heading={t('groupReleaseSchedule')}
                  style={{
                    opacity: isKeyboardVisible ? 0 : 1,
                  }}
                />
              </Flex>
              <Flex value={1} direction="column" justify="center">
                <Carousel
                  containerCustomStyle={{
                    backgroundColor: 'rgba(0,0,0,.3)'
                  }}
                  // ref={(c) => { this._carousel = c; }}
                  data={[
                    {
                      icon: '',
                      title: 'Weekly Releases',
                      description: 'Automatically release videos once a week.',
                      buttonLabel: 'Select',
                      // buttonAction: ()=>{ console.log('button Clicked')}
                    },
                    {
                      icon: '',
                      title: 'Daily Releases',
                      description: 'Automatically release videos every day.',
                      buttonLabel: 'Select',
                      // buttonAction: ()=>{ console.log('button Clicked')}
                    },
                    {
                      icon: '',
                      title: 'Manual Releases',
                      description: 'Release videos manually, whenever youâ€™re ready.',
                      buttonLabel: 'Select',
                      // buttonAction: ()=>{ console.log('button Clicked')}
                    },
                  ]}
                  renderItem={renderItem}
                  removeClippedSubviews={false}
                  sliderWidth={width}
                  // sliderHeight={width}
                  //  - theme.spacing.xl*2
                  // itemWidth={width-width/4}
                  // itemHeight={400}
                  itemWidth={width - 80}
                  // layout={'default'}
                  // loop={true}
                  // loopClonesPerSide={2}
                  // autoplay={true}
                  // autoplayDelay={500}
                  // autoplayInterval={3000}
                  // onSnapToItem={(index) => this.setState({ slider1ActiveSlide: index }) }
                />
              </Flex>
            </Flex>
          </SafeAreaView>
        </DismissKeyboardView>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

export default GroupReleaseType;
