/**
 * @format
 */

import 'react-native';
import React from 'react';
import { fireEvent, render, waitFor } from '@testing-library/react-native';
// import { toHaveStyle } from '@testing-library/jest-native'; - causes TS error.
// https://github.com/testing-library/jest-dom/issues/123
import '@testing-library/jest-native';
import AdventureStepMessage from '../index';
import { Text, View } from 'react-native';
import i18n from 'i18next';
import renderWithContext from 'utils/testUtils';

// the modal component is automatically mocked by RN and apparently contains
// a bug which make the modal (and it's children) always visible in the test tree
// this is a hack which fix this issue
jest.mock('react-native/Libraries/Modal/Modal', () => {
	const Modal = jest.requireActual('react-native/Libraries/Modal/Modal');
	// @ts-ignore
	return props => <Modal {...props} />;
});

beforeEach(() => {
	// https://github.com/facebook/jest/issues/6434#issuecomment-525576660
	jest.useFakeTimers();
});

const initialState = {
	auth: { user: { id: 'xxxxxxxxxxx' } },
};

/* it('renders correctly', () => {
	const {
		queryByText,
		toJSON,
	} = render(<LanguageSwitch />);

	expect(toJSON()).toMatchSnapshot();
	expect(queryByText(/English/i)).toBeTruthy();
	expect(queryByText(/FR/i)).not.toBeTruthy();
}); */

it('renders correctly', async () => {
	const {
		queryByText,
		toJSON,
	} = renderWithContext(<AdventureStepMessage
		item={{
			'id': "2b12d004-c6e9-48f9-aa18-438dbc86d2e3",
			'content': "Test message content",
			'position': 1,
			'messenger_id': "111",
			'conversation_id': "e60183b3-b313-4021-970b-2923f128b194",
			'messenger_journey_step_id': "c9617d84-fedc-4170-8158-42c669059e4b",
			'grouping_journey_step_id': "c9617d84-fedc-4170-8158-42c669059e4b",
			'kind': "text",
			'direct_message': false,
			'item': null,
			'reactions': {},
			'adventure_message?': true,
			'metadata': {},
			'created_at': "2021-01-21T17:24:25.758Z"
		}}
		step={{}}
		adventure={{
			conversation: {
				id: 'zzzzzzzzzz',
				'unread_messages': 0,
				messengers: [
					{
						'id': '111',
						'first_name': 'First Name',
						'last_name': 'Last Name',
						'avatar': { small: '', medium: '', large: '' },
						'status': '',
						'group_leader': true
					}
				]
			}
		}}
		previous={{}}
		next={null}
		onFocus={() => { }}
	/>, { initialState });

	expect(queryByText(/Test message content/i)).toBeTruthy();
	expect(queryByText(/First Name/i)).toBeTruthy();
	expect(queryByText(/Last Name/i)).toBeTruthy();

	expect(toJSON()).toMatchSnapshot();
});

it('show context menu on long press', async () => {
	const {
		getByTestId,
		queryByTestId,
		getByText,
		queryByText,
		toJSON,
		debug,
	} = renderWithContext(<AdventureStepMessage
		item={{
			'id': "2b12d004-c6e9-48f9-aa18-438dbc86d2e3",
			'content': "Test message content",
			'position': 1,
			'messenger_id': "111",
			'conversation_id': "e60183b3-b313-4021-970b-2923f128b194",
			'messenger_journey_step_id': "c9617d84-fedc-4170-8158-42c669059e4b",
			'grouping_journey_step_id': "c9617d84-fedc-4170-8158-42c669059e4b",
			'kind': "text",
			'direct_message': false,
			'item': null,
			'reactions': {},
			'adventure_message?': true,
			'metadata': {},
			'created_at': "2021-01-21T17:24:25.758Z"
		}}
		step={{}}
		adventure={{
			conversation: {
				id: 'zzzzzzzzzz',
				'unread_messages': 0,
				messengers: [
					{
						'id': '111',
						'first_name': 'First Name',
						'last_name': 'Last Name',
						'avatar': { small: '', medium: '', large: '' },
						'status': '',
						'group_leader': true
					}
				]
			}
		}}
		previous={{}}
		next={null}
		onFocus={() => { }}
	/>, { initialState });

	// Initial:
	expect(queryByText(/Copy/i)).not.toBeTruthy();
	expect(queryByText(/Report/i)).not.toBeTruthy();
	expect(queryByTestId('messageReactions')).not.toBeTruthy();
	// Action:
	fireEvent.press(getByTestId('messagePressArea'));
	// Result:
	expect(queryByText(/Copy/i)).toBeTruthy();
	expect(queryByText(/Report/i)).toBeTruthy();
	expect(queryByTestId('messageReactions')).toBeTruthy();

	expect(toJSON()).toMatchSnapshot();
});

// - It copies message into the memory.
// - It creates report
// - It show context modal
// - It selects reaction

